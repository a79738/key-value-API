services:
  # Nginx Load Balancer
  load_balancer:
    image: nginx:latest
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
      - api3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # API Instances
  api1: &api_template
    build: ./api
    container_name: api1
    expose:
      - "3000"
    depends_on:
      redis:
        condition: service_healthy
      haproxy:
        condition: service_healthy
      rabbitmq1:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBITMQ_HOST=rabbitmq1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  api2:
    <<: *api_template
    container_name: api2
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBITMQ_HOST=rabbitmq1

  api3:
    <<: *api_template
    container_name: api3
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBITMQ_HOST=rabbitmq2

  # Consumer Instances
  consumer1: &consumer_template
    build: ./consumer
    container_name: consumer1
    command: python consumer.py
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq1:
        condition: service_healthy
      haproxy:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBITMQ_HOST=rabbitmq1

  consumer2:
    <<: *consumer_template
    container_name: consumer2
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBITMQ_HOST=rabbitmq1

  consumer3:
    <<: *consumer_template
    container_name: consumer3
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBITMQ_HOST=rabbitmq2

  # Redis
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # CockroachDB Cluster
  crdb1:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=crdb1,crdb2,crdb3
    hostname: crdb1
    ports:
      - "26257:26257"
      - "8081:8080"
    volumes:
      - crdb1-data:/cockroach/cockroach-data

  crdb2:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=crdb1,crdb2,crdb3
    hostname: crdb2
    ports:
      - "26258:26257"
      - "8082:8080"
    volumes:
      - crdb2-data:/cockroach/cockroach-data

  crdb3:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=crdb1,crdb2,crdb3
    hostname: crdb3
    ports:
      - "26259:26257"
      - "8083:8080"
    volumes:
      - crdb3-data:/cockroach/cockroach-data

  crdb-init:
    image: cockroachdb/cockroach:v23.1.11
    depends_on:
      - crdb1
    entrypoint: >
      /bin/sh -c "
        echo 'Assuming crdb1 is ready...';
        echo 'Initializing cluster...';
        cockroach init --insecure --host=crdb1 || echo 'Already initialized';
        cockroach sql --insecure --host=crdb1 -e 'CREATE DATABASE appdb;'
        cockroach sql --insecure --host=crdb1 --database=appdb -e 'CREATE TABLE IF NOT EXISTS kv_store (key TEXT PRIMARY KEY,value TEXT,last_updated TIMESTAMPTZ NOT NULL DEFAULT NOW());'
        echo 'Done.';
      "

  # HAProxy - Load balancer para o CockroachDB
  haproxy:
    image: haproxy:2.9
    ports:
      - "26256:26256"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      crdb-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ Instances
  rabbitmq1: &rabbitmq_template
    image: rabbitmq:3-management
    container_name: rabbitmq1
    hostname: rabbitmq1
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  rabbitmq2:
    <<: *rabbitmq_template
    container_name: rabbitmq2
    hostname: rabbitmq2
    ports:
      - "5673:5672"
      - "15673:15672"

volumes:
  crdb1-data:
  crdb2-data:
  crdb3-data:
