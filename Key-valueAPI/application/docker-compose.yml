version: '3.9'

# Define custom network with fixed subnet
networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

services:
  # ──────────────────────────────────────────────────────────────────
  # Nginx Load Balancer
  # ──────────────────────────────────────────────────────────────────
  nginx:
    image: nginx:alpine
    container_name: application-nginx
    networks:
      - app-network
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
      - api3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ──────────────────────────────────────────────────────────────────
  # API (Múltiplas Instâncias)
  # ──────────────────────────────────────────────────────────────────
  api1:
    build: ./api
    container_name: application-api1
    hostname: api1
    networks:
      - app-network
    expose:
      - "3000"
    depends_on:
      - haproxy
      - redis-master
      - sentinel-1
      - broker-1
    environment:
      - REDIS_USE_SENTINEL=true
      - REDIS_MASTER_NAME=mymaster
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBIT_URL=amqp://appuser:s3nh4segura@broker-1:5672/
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api2:
    build: ./api
    container_name: application-api2
    hostname: api2
    networks:
      - app-network
    expose:
      - "3000"
    depends_on:
      - haproxy
      - redis-master
      - sentinel-1
      - broker-1
    environment:
      - REDIS_USE_SENTINEL=true
      - REDIS_MASTER_NAME=mymaster
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBIT_URL=amqp://appuser:s3nh4segura@broker-1:5672/
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api3:
    build: ./api
    container_name: application-api3
    hostname: api3
    networks:
      - app-network
    expose:
      - "3000"
    depends_on:
      - haproxy
      - redis-master
      - sentinel-1
      - broker-1
    environment:
      - REDIS_USE_SENTINEL=true
      - REDIS_MASTER_NAME=mymaster
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBIT_URL=amqp://appuser:s3nh4segura@broker-1:5672/
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ──────────────────────────────────────────────────────────────────
  # Consumer (Múltiplas Instâncias)
  # ──────────────────────────────────────────────────────────────────
  consumer1:
    build: ./consumer
    container_name: application-consumer1
    hostname: consumer1
    networks:
      - app-network
    command: python consumer.py
    depends_on:
      - haproxy
      - redis-master
      - sentinel-1
      - broker-1
    environment:
      - CONSUMER_NAME=consumer1
      - PREFETCH_COUNT=20
      - REDIS_USE_SENTINEL=true
      - REDIS_MASTER_NAME=mymaster
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBIT_URL=amqp://appuser:s3nh4segura@broker-1:5672/
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "[p]ython consumer.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  consumer2:
    build: ./consumer
    container_name: application-consumer2
    hostname: consumer2
    networks:
      - app-network
    command: python consumer.py
    depends_on:
      - haproxy
      - redis-master
      - sentinel-1
      - broker-1
    environment:
      - CONSUMER_NAME=consumer2
      - PREFETCH_COUNT=20
      - REDIS_USE_SENTINEL=true
      - REDIS_MASTER_NAME=mymaster
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBIT_URL=amqp://appuser:s3nh4segura@broker-1:5672/
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "[p]ython consumer.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  consumer3:
    build: ./consumer
    container_name: application-consumer3
    hostname: consumer3
    networks:
      - app-network
    command: python consumer.py
    depends_on:
      - haproxy
      - redis-master
      - sentinel-1
      - broker-1
    environment:
      - CONSUMER_NAME=consumer3
      - PREFETCH_COUNT=20
      - REDIS_USE_SENTINEL=true
      - REDIS_MASTER_NAME=mymaster
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - SENTINEL_HOSTS=sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      - POSTGRES_HOST=haproxy
      - POSTGRES_PORT=26256
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=""
      - POSTGRES_DB=appdb
      - RABBIT_URL=amqp://appuser:s3nh4segura@broker-1:5672/
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "[p]ython consumer.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ──────────────────────────────────────────────────────────────────
  # Redis Master, Replicas e Sentinel
  # ──────────────────────────────────────────────────────────────────
  redis-master:
    image: redis:7-alpine
    container_name: application-redis-master
    networks:
      app-network:
        ipv4_address: 172.28.1.2
    volumes:
      - redis-master-data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    restart: unless-stopped

  redis-replica-1:
    image: redis:7-alpine
    container_name: application-redis-replica-1
    networks:
      app-network:
        ipv4_address: 172.28.1.3
    depends_on:
      - redis-master
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --replicaof redis-master 6379
    restart: unless-stopped

  redis-replica-2:
    image: redis:7-alpine
    container_name: application-redis-replica-2
    networks:
      app-network:
        ipv4_address: 172.28.1.4
    depends_on:
      - redis-master
    ports:
      - "6381:6379"
    command: redis-server --appendonly yes --replicaof redis-master 6379
    restart: unless-stopped

  # Redis Sentinel para failover automático
  sentinel-1:
    image: redis:7-alpine
    container_name: application-sentinel-1
    networks:
      app-network:
        ipv4_address: 172.28.1.5
    depends_on:
      - redis-master
      - redis-replica-1
      - redis-replica-2
    ports:
      - "26379:26379"
    command: >
      sh -c "
      echo 'Waiting for redis-master...' &&
      until redis-cli -h 172.28.1.2 ping; do
        echo 'Waiting for Redis master to be available...'
        sleep 1
      done &&
      echo 'Redis master is up!' &&
      redis-sentinel /etc/redis/sentinel.conf"
    volumes:
      - ./cache/sentinel-1.conf:/etc/redis/sentinel.conf
    restart: unless-stopped

  sentinel-2:
    image: redis:7-alpine
    container_name: application-sentinel-2
    networks:
      app-network:
        ipv4_address: 172.28.1.6
    depends_on:
      - redis-master
      - redis-replica-1
      - redis-replica-2
    ports:
      - "26380:26379"
    command: >
      sh -c "
      echo 'Waiting for redis-master...' &&
      until redis-cli -h 172.28.1.2 ping; do
        echo 'Waiting for Redis master to be available...'
        sleep 1
      done &&
      echo 'Redis master is up!' &&
      redis-sentinel /etc/redis/sentinel.conf"
    volumes:
      - ./cache/sentinel-2.conf:/etc/redis/sentinel.conf
    restart: unless-stopped

  sentinel-3:
    image: redis:7-alpine
    container_name: application-sentinel-3
    networks:
      app-network:
        ipv4_address: 172.28.1.7
    depends_on:
      - redis-master
      - redis-replica-1
      - redis-replica-2
    ports:
      - "26381:26379"
    command: >
      sh -c "
      echo 'Waiting for redis-master...' &&
      until redis-cli -h 172.28.1.2 ping; do
        echo 'Waiting for Redis master to be available...'
        sleep 1
      done &&
      echo 'Redis master is up!' &&
      redis-sentinel /etc/redis/sentinel.conf"
    volumes:
      - ./cache/sentinel-3.conf:/etc/redis/sentinel.conf
    restart: unless-stopped

  # ──────────────────────────────────────────────────────────────────
  # RabbitMQ Cluster
  # ──────────────────────────────────────────────────────────────────
  broker-1:
    image: rabbitmq:3.13-management
    container_name: application-broker-1
    hostname: broker-1
    networks:
      app-network:
        ipv4_address: 172.28.0.10
    environment:
      RABBITMQ_DEFAULT_USER: appuser
      RABBITMQ_DEFAULT_PASS: s3nh4segura
      RABBITMQ_ERLANG_COOKIE: s3cr3tc00ki3
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Management UI
    restart: unless-stopped

  broker-2:
    image: rabbitmq:3.13-management
    container_name: application-broker-2
    hostname: broker-2
    networks:
      app-network:
        ipv4_address: 172.28.0.11
    environment:
      RABBITMQ_DEFAULT_USER: appuser
      RABBITMQ_DEFAULT_PASS: s3nh4segura
      RABBITMQ_ERLANG_COOKIE: s3cr3tc00ki3
    ports:
      - "5673:5672"     # AMQP
      - "15673:15672"   # Management UI
    depends_on:
      - broker-1
    command: >
      bash -c "
        sleep 10;
        rabbitmq-server &
        sleep 10;
        rabbitmqctl stop_app;
        rabbitmqctl join_cluster rabbit@broker-1;
        rabbitmqctl start_app;
        tail -f /dev/null
      "
    restart: unless-stopped

  broker-3:
    image: rabbitmq:3.13-management
    container_name: application-broker-3
    hostname: broker-3
    networks:
      app-network:
        ipv4_address: 172.28.0.12
    environment:
      RABBITMQ_DEFAULT_USER: appuser
      RABBITMQ_DEFAULT_PASS: s3nh4segura
      RABBITMQ_ERLANG_COOKIE: s3cr3tc00ki3
    ports:
      - "5674:5672"     # AMQP
      - "15674:15672"   # Management UI
    depends_on:
      - broker-1
    command: >
      bash -c "
        sleep 20;
        rabbitmq-server &
        sleep 10;
        rabbitmqctl stop_app;
        rabbitmqctl join_cluster rabbit@broker-1;
        rabbitmqctl start_app;
        tail -f /dev/null
      "
    restart: unless-stopped

  # ──────────────────────────────────────────────────────────────────
  # CockroachDB Cluster
  # ──────────────────────────────────────────────────────────────────
  crdb1:
    image: cockroachdb/cockroach:v23.1.11
    container_name: application-crdb-1
    hostname: crdb1
    networks:
      - app-network
    command: start --insecure --join=crdb1,crdb2,crdb3
    ports:
      - "26257:26257"
      - "18080:8080"
    volumes:
      - crdb1-data:/cockroach/cockroach-data
    restart: unless-stopped

  crdb2:
    image: cockroachdb/cockroach:v23.1.11
    container_name: application-crdb-2
    hostname: crdb2
    networks:
      - app-network
    command: start --insecure --join=crdb1,crdb2,crdb3
    ports:
      - "26258:26257"
      - "18081:8080"
    volumes:
      - crdb2-data:/cockroach/cockroach-data
    restart: unless-stopped

  crdb3:
    image: cockroachdb/cockroach:v23.1.11
    container_name: application-crdb-3
    hostname: crdb3
    networks:
      - app-network
    command: start --insecure --join=crdb1,crdb2,crdb3
    ports:
      - "26259:26257"
      - "18082:8080"
    volumes:
      - crdb3-data:/cockroach/cockroach-data
    restart: unless-stopped

  crdb-init:
    image: cockroachdb/cockroach:v23.1.11
    container_name: application-crdb-init
    networks:
      - app-network
    depends_on:
      - crdb1
    entrypoint: >
      /bin/sh -c "
        echo 'Assuming crdb1 is ready...';
        echo 'Initializing cluster...';
        cockroach init --insecure --host=crdb1 || echo 'Already initialized';
        cockroach sql --insecure --host=crdb1 -e 'CREATE DATABASE IF NOT EXISTS appdb;'
        cockroach sql --insecure --host=crdb1 --database=appdb -e 'CREATE TABLE IF NOT EXISTS kv_store (key TEXT PRIMARY KEY,value TEXT,last_updated TIMESTAMPTZ NOT NULL DEFAULT NOW());'
        echo 'Done.';
      "
    restart: "no"

  # ──────────────────────────────────────────────────────────────────
  # HAProxy Load Balancer for CockroachDB
  # ──────────────────────────────────────────────────────────────────
  haproxy:
    image: haproxy:2.9
    container_name: application-haproxy
    networks:
      - app-network
    ports:
      - "26256:26256"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - crdb-init
    restart: unless-stopped

volumes:
  crdb1-data:
  crdb2-data:
  crdb3-data:
  redis-master-data:
